#!/bin/sh
#
# rc file for Deferred Event Java Worker
#
### BEGIN INIT INFO
# Provides:          deferred-event-java-worker
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: DeferredEventJavaWorker
# Description:       DeferredEventJavaWorker
### END INIT INFO

NAME="Deferred Event Java Worker"
SCRIPT_NAME="/etc/init.d/deferred-event-java-worker"


#
# You may change these values to match your installation
#

PLUGIN_PATH=/opt/DeferredEventJavaWorker
FILE_NAME=DeferredEventJavaWorker.jar
USER=java_user

MESSAGE_QUEUE="rabbitmq"
EXECUTOR="shell" # could be "shell" or "http"

LOG=/var/log/deferred-event-java-worker.log

#
# stop changing
#

#This is the command that will start the application
COMMAND="java -Dexecutor=$EXECUTOR -DmessageQueue=$MESSAGE_QUEUE -jar $PLUGIN_PATH/$FILE_NAME"
touch $LOG
chown $USER $LOG


#
# Start the application
#
do_start() {
        cd $PLUGIN_PATH
        su $USER -c "$COMMAND >> $LOG 2>&1 &"
        echo "OK"
}

#
# Stop the application
#
do_stop() {
        do_check

        PID=$?
        if [ $PID -eq 0 ] ; then
            echo "Application is already stopped"
            exit 1
        fi

        echo -n "Stopping application (pid: $PID): "
        kill -9 $PID
        echo "OK"
}

#
# Check if the application is running
# Returns 0 if it is NOT running
#
do_check()
{
    # Running ps with some arguments to check if the PID exists
    # -C : specifies the command name
    # -o : determines how columns must be displayed
    # h : hides the data header
    # sed -n 1p takes first line only
    PID=`ps -C "$COMMAND" -o pid h | sed -n 1p`

    # If something was returned by the ps command, this function returns the PID
    if [ $PID ] ; then
        return $PID
    fi

    # In any another case, return 0
    return 0
}

case "$1" in
    start)
        echo "Starting $NAME"
        do_check

        PID=$?
        if [ $PID -ne 0 ] ; then
            echo "$NAME is already running"
            exit 1
        fi

        do_start
        ;;
    stop)
        echo "Stopping $NAME"
        do_stop
        ;;
    status)
        do_check
        if [ $? -ne 0 ] ; then
             echo "$NAME is running"
        else
             echo "$NAME is NOT running"
        fi
        ;;
    restart)
        echo "Restarting $DESC" "$NAME"
        do_check

        PID=$?
        if [ $PID -ne 0 ] ; then
            do_stop
        else
            echo "$NAME was not running... I'll start it for you"
        fi
        do_start
        ;;
    *)
        echo "Usage: $SCRIPT_NAME {start|stop|status|restart}" >&2
        exit 1
    ;;
esac

: